#!/usr/bin/python3

"""
== Лото ==

Правила игры в лото.

Игра ведется с помощью специальных карточек, на которых отмечены числа, 
и фишек (бочонков) с цифрами.

Количество бочонков — 90 штук (с цифрами от 1 до 90).

Каждая карточка содержит 3 строки по 9 клеток. В каждой строке по 5 случайных цифр, 
расположенных по возрастанию. Все цифры в карточке уникальны. Пример карточки:

--------------------------
    9 43 62          74 90
 2    27    75 78    82
   41 56 63     76      86 
--------------------------

В игре 2 игрока: пользователь и компьютер. Каждому в начале выдается 
случайная карточка. 

Каждый ход выбирается один случайный бочонок и выводится на экран.
Также выводятся карточка игрока и карточка компьютера.

Пользователю предлагается зачеркнуть цифру на карточке или продолжить.
Если игрок выбрал "зачеркнуть":
	Если цифра есть на карточке - она зачеркивается и игра продолжается.
	Если цифры на карточке нет - игрок проигрывает и игра завершается.
Если игрок выбрал "продолжить":
	Если цифра есть на карточке - игрок проигрывает и игра завершается.
	Если цифры на карточке нет - игра продолжается.

Побеждает тот, кто первый закроет все числа на своей карточке.

Пример одного хода:

Новый бочонок: 70 (осталось 76)
------ Ваша карточка -----
 6  7          49    57 58
   14 26     -    78    85
23 33    38    48    71
--------------------------
-- Карточка компьютера ---
 7 11     - 14    87
      16 49    55 77    88
   15 20     -       76  -
--------------------------
Зачеркнуть цифру? (y/n)

Подсказка: каждый следующий случайный бочонок из мешка удобно получать
с помощью функции-генератора.

Подсказка: для работы с псевдослучайными числами удобно использовать
модуль random: http://docs.python.org/3/library/random.html

"""

from random import randint
from random import shuffle
import os
import sys


class Gamer:
    def __init__(self, name):
        self.name = name
        self.loto_card = self.generate_card()
        self.del_num = 0  # счетчик зачеркнутых чисел

    # генерируем игровую карточку
    def generate_card(self):
        # создаем пустую карточку
        loto_card = [[' ' for _ in range(9)] for _ in range(3)]

        # цикл генерирует числа в игровую карточку построчно
        for j in range(3):
            # заполняем список случайными, неповторяющимися числами от 1 до 9
            # каждое число в этом списке будет использовано для генерации числа и ограничении генерации числа
            # в итервалах 1-9, 10-11, 20-29 и т.д.
            dec_num = []
            while len(dec_num) < 5:
                k = randint(1, 9)
                if k not in dec_num:
                    dec_num.append(k)

            # с использованием чисел из dec_num генерируем числа с интервалах 1-9, 10-11, 20-29 и т.д.
            for i in dec_num:
                while True:
                    if i == 9:
                        rand_num = (randint(10 * (i - 1), 10 * i))  # если 9, то ограничиваем интервалом 80-90
                    elif i == 1:
                        rand_num = (randint(i, 10 - i))  # если 1, то ограничиваем интервалом 1-9
                    else:
                        rand_num = (randint(10 * (i - 1), 10 * i - 1))  # остальные ограничиваем интервалом 10-19, 20-29 и т.д.

                    # проверяем что бы числа небыло в игровой карточке
                    rand_num_check = [True for line in loto_card if rand_num in line]
                    # если числа нет, то добавляем число в игровую карточку в столбец, соответствующий десятку числа
                    if not rand_num_check:
                        loto_card[j][i - 1] = rand_num
                        break
        return loto_card

    # перегружаем метод печати для вывода игровой карточки
    def __str__(self):
        card_header = f'{self.name:-^36}\n'
        card_footer = f"{'-':-^36}\n"
        for line in self.loto_card:
            for n in line:
                card_header += f'{n:^4}'
            card_header += '\n'
        card = card_header + card_footer
        return card

    # метод проверки наличия выпавшего номера в карточке
    # если число есть в карточке, то передаем его позицию в метод remove_num()
    def check_num(self, num):
        for i in range(len(self.loto_card)):
            for j in range(len(self.loto_card[i])):
                if self.loto_card[i][j] == num:
                    self.remove_num([i, j])
                    return True
        return False

    # метод который 'зачеркивает' совпашее число
    def remove_num(self, pos_num):
        self.loto_card[pos_num[0]][pos_num[1]] = 'X'
        self.del_num += 1  # прибавляем счетчик

    # метод проверяет, когда счетчик зачеркнутых чисел дойдет до 15 (все числа зачеркнуты)
    def check_win(self):
        if self.del_num == 15:
            return True


# функция генератор выдающая боченки из мешка
def cylinder():
    bag = [x for x in range(1, 91)]  # наполняем мешок
    shuffle(bag)  # перемешиваем бочонки
    for cyl in range(0, 90):  # достаем по одному бочонку при обращении к итератору
        yield bag[cyl]


# создаем игроков
gamer_name = input('Введите свое имя: ')
human = Gamer(gamer_name)
computer = Gamer('Компьютер')

k = 89  # остаток бочонков
for i in cylinder():
    print(f'\nНовый бочонок: {i} (осталось {k})\n')
    print(human)

    # ход компьютера
    computer.check_num(i)
    print(computer)

    # ход игрока
    while True:
        answer = input("Зачеркнуть цифру? (y/n): ")
        if answer in ['y', 'Y', 'yes', 'YES']:
            if human.check_num(i):
                break
            else:
                print('\nТакого числа нет в карточке. Вы проиграли!')
                sys.exit()
        if answer in ['n', 'N', 'no', 'NO']:
            if human.check_num(i):
                print('\nВыпавшее число есть в вашей карточке. Вы проиграли!')
                sys.exit()
            else:
                break
        if answer in ['q', 'Q', 'quit', 'QUIT', 'exit', 'EXIT']:
            print('Игра прервана')
            sys.exit()

    # проверяем зачеркнул ли кто нибудь все числа
    if human.check_win() and computer.check_win():
        print('\nНичья!')
        sys.exit()
    if computer.check_win():
        print(f'\n{computer.name} победил!')
        sys.exit()
    if human.check_win():
        print(f'\nПоздравляем {human.name}! Вы победили!')
        sys.exit()
    k -= 1

